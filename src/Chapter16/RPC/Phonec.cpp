#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include "phone.h"    // Generated by MIDL compiler
#include <Ntdsapi.h>  // Needed for DsMakeSpn

void Usage() {
    fprintf(stderr, "Usage:  Phonec\n");
    fprintf(stderr, " -p protocol_sequence\n");
    fprintf(stderr, " -n network_address\n");
    fprintf(stderr, " -e endpoint\n");
    fprintf(stderr, " -o options\n");
    fprintf(stderr, " -s string\n");
    exit(1);
}

void __cdecl main(int argc, unsigned char **argv) {
    LPBYTE pszUuid             = (LPBYTE)NULL;
    LPBYTE pszProtocolSequence = (LPBYTE)"ncacn_np";
    LPBYTE pszNetworkAddress   = (LPBYTE)NULL;
    LPBYTE pszEndpoint         = (LPBYTE)"\\pipe\\phone";
    LPBYTE pszOptions          = (LPBYTE)NULL;
    LPBYTE pszString           = (LPBYTE)"The password is $chm0oze";

    // Allow the user to override settings with command line switches.
    for (int i = 1; i < argc; i++) {
        if ((*argv[i] == '-') || (*argv[i] == '/')) {
            switch (tolower(*(argv[i]+1))) {
            case 'p':  // Protocol sequence
                pszProtocolSequence = argv[++i];
                break;
            case 'n':  // Network address
                pszNetworkAddress = argv[++i];
                break;
            case 'e':  // Endpoint
                pszEndpoint = argv[++i];
                break;
            case 'o':
                pszOptions = argv[++i];
                break;
            case 's':
                pszString = argv[++i];
                break;
            case 'h':
            case '?':
            default:
                Usage();
            }
        }
        else
            Usage();
    }

    // Use a convenience function to concatenate the elements of
    // the string binding into the proper sequence.              
    LPBYTE pszStringBinding = (LPBYTE)NULL;
    RPC_STATUS status = RpcStringBindingCompose(pszUuid,
                                     pszProtocolSequence,
                                     pszNetworkAddress,
                                     pszEndpoint,
                                     pszOptions,
                                     &pszStringBinding);
    printf("RpcStringBindingCompose returned 0x%x\n", status);
    printf("pszStringBinding = %s\n", pszStringBinding);
    if (status)
        exit(status);

    // Set the binding handle that will be used to bind to the server.
 	handle_t hPhone = NULL;
    status = RpcBindingFromStringBinding(pszStringBinding,
                                         &hPhone);
    printf("RpcBindingFromStringBinding returned 0x%x\n", status);
    if (status) 
        exit(status);

	// Get the server principal name for Kerberos support.
	DWORD cbSPN = MAX_PATH;
	char szSPN[MAX_PATH + 1];
	status = DsMakeSpn("ldap",
						"blake-laptop.northwindtraders.com",
						NULL,
						0,
						NULL,
						&cbSPN,
						szSPN);

     printf("DsMakeSpn returned 0x%x\n", status);
    if (status) 
        exit(status);

   // Set Security settings 
    status = RpcBindingSetAuthInfo(hPhone,
									(LPBYTE)szSPN,
									RPC_C_AUTHN_LEVEL_PKT_PRIVACY,
									RPC_C_AUTHN_GSS_NEGOTIATE,
									0,
									0);
    printf("RpcBindingSetAuthInfo returned 0x%x\n", status);
    if (status)
        exit(status);

    printf("Calling the remote procedure 'Message'\n");
    printf("Print the string '%s' on the server\n", pszString);

	// make the remote call
    RpcTryExcept {
        Message(hPhone,pszString);  
    }
    RpcExcept(1) {
        ULONG ulCode = RpcExceptionCode();
        printf("Runtime reported exception 0x%lx = %ld\n", ulCode, ulCode);
    }
    RpcEndExcept

    //  The calls to the remote procedures are complete. 
    //  Free the string and the binding handle.           
    status = RpcStringFree(&pszStringBinding);  
    printf("RpcStringFree returned 0x%x\n", status);
    if (status)
        exit(status);

    status = RpcBindingFree(&hPhone);  
    printf("RpcBindingFree returned 0x%x\n", status);
    if (status) 
        exit(status);

    exit(0);
}  

void  __RPC_FAR * __RPC_USER midl_user_allocate(size_t len) {
    return(malloc(len));
}

void __RPC_USER midl_user_free(void __RPC_FAR * ptr) {
    free(ptr);
}
